package vista;

import com.toedter.calendar.JDateChooser;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import conexion.Conexion;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author mcabral
 */
public class FrmMenu extends javax.swing.JFrame {

    public static JDesktopPane JDesktopPane_menu;

    private final JDateChooser dateChooserInicio = null;
    private final JDateChooser dateChooserFin = null;

    /**
     * Creates new form FrmMenu
     */
    public FrmMenu() {
        initComponents();
        this.setSize(new Dimension(1200, 700));
        this.setExtendedState(this.MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        this.setTitle("Menu - Sistema de Remesas");

        this.setLayout(null);

        //JDesktopPane_menu = new JDesktopPane();
        JDesktopPane_menu = new JDesktopPane() {
            // Sobreescribir el método paintComponent para establecer el fondo personalizado
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // Dibujar la imagen de fondo
                ImageIcon icon = new ImageIcon(getClass().getResource("/img/fondo4.jpg"));
                g.drawImage(icon.getImage(), 0, 0, getWidth(), getHeight(), this);
            }
        };

        int ancho = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int alto = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        this.JDesktopPane_menu.setBounds(0, 0, ancho, (alto - 110));
        this.add(JDesktopPane_menu);

        Timer timer = new Timer(1000, e -> {
            SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss a");
            label_horaSistema.setText(dateFormat.format(new Date()));
        });
        timer.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_horaSistema = new javax.swing.JLabel();
        lblNombreUsuario = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_nuevo_usuario = new javax.swing.JMenuItem();
        jMenuItem_gestionar_usuario = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem_nuevo_cliente = new javax.swing.JMenuItem();
        jMenuItem_gestionar_cliente = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem_nueva_facturacion = new javax.swing.JMenuItem();
        jMenuItem_gestionar_facturacion = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem_nueva_trasaccion = new javax.swing.JMenuItem();
        jMenuItem_gestionar_transaccion = new javax.swing.JMenuItem();
        jMenuItem_historial = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem_reportes_usuarios = new javax.swing.JMenuItem();
        jMenuItem_resportes_clientes = new javax.swing.JMenuItem();
        jMenuItem_reportes_facturacion = new javax.swing.JMenuItem();
        jMenuItem_reportes_transacion = new javax.swing.JMenuItem();
        jMenuItem_reportes_trans_fecha = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem_general = new javax.swing.JMenuItem();
        jMenuItem_empresa = new javax.swing.JMenuItem();
        jMenuItem_facturacion = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label_horaSistema.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label_horaSistema.setForeground(new java.awt.Color(255, 255, 255));
        label_horaSistema.setText("Hora Sistema:");
        getContentPane().add(label_horaSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 40, 230, 60));

        lblNombreUsuario.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblNombreUsuario.setForeground(new java.awt.Color(255, 255, 255));
        lblNombreUsuario.setText("Usuario");
        getContentPane().add(lblNombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, 270, -1));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/usuario.png"))); // NOI18N
        jMenu1.setText("Usuarios");
        jMenu1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu1.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_nuevo_usuario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_nuevo_usuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo.png"))); // NOI18N
        jMenuItem_nuevo_usuario.setText("Nuevo Usuario");
        jMenuItem_nuevo_usuario.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenuItem_nuevo_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_nuevo_usuarioActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_nuevo_usuario);

        jMenuItem_gestionar_usuario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_gestionar_usuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/usuario.png"))); // NOI18N
        jMenuItem_gestionar_usuario.setText("Gestionar Usuarios");
        jMenuItem_gestionar_usuario.setPreferredSize(new java.awt.Dimension(160, 30));
        jMenuItem_gestionar_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_gestionar_usuarioActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_gestionar_usuario);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cliente.png"))); // NOI18N
        jMenu2.setText("Clientes");
        jMenu2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu2.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_nuevo_cliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_nuevo_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevo-cliente.png"))); // NOI18N
        jMenuItem_nuevo_cliente.setText("Nuevo Cliente");
        jMenuItem_nuevo_cliente.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenuItem_nuevo_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_nuevo_clienteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_nuevo_cliente);

        jMenuItem_gestionar_cliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_gestionar_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cliente.png"))); // NOI18N
        jMenuItem_gestionar_cliente.setText("Gestionar Clientes");
        jMenuItem_gestionar_cliente.setPreferredSize(new java.awt.Dimension(160, 30));
        jMenuItem_gestionar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_gestionar_clienteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_gestionar_cliente);

        jMenuBar1.add(jMenu2);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/carrito.png"))); // NOI18N
        jMenu3.setText("Facturación");
        jMenu3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu3.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_nueva_facturacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_nueva_facturacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anadir.png"))); // NOI18N
        jMenuItem_nueva_facturacion.setText("Nueva Factura");
        jMenuItem_nueva_facturacion.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenuItem_nueva_facturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_nueva_facturacionActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_nueva_facturacion);

        jMenuItem_gestionar_facturacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_gestionar_facturacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/carrito.png"))); // NOI18N
        jMenuItem_gestionar_facturacion.setText("Gestionar Factura");
        jMenuItem_gestionar_facturacion.setPreferredSize(new java.awt.Dimension(170, 30));
        jMenu3.add(jMenuItem_gestionar_facturacion);

        jMenuBar1.add(jMenu3);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/categorias.png"))); // NOI18N
        jMenu4.setText("Transaciones");
        jMenu4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu4.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_nueva_trasaccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_nueva_trasaccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anadir.png"))); // NOI18N
        jMenuItem_nueva_trasaccion.setText("Nueva Transaccion");
        jMenuItem_nueva_trasaccion.setPreferredSize(new java.awt.Dimension(160, 30));
        jMenuItem_nueva_trasaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_nueva_trasaccionActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_nueva_trasaccion);

        jMenuItem_gestionar_transaccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_gestionar_transaccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/categorias.png"))); // NOI18N
        jMenuItem_gestionar_transaccion.setText("Gestionar Transaccion");
        jMenuItem_gestionar_transaccion.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenuItem_gestionar_transaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_gestionar_transaccionActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_gestionar_transaccion);

        jMenuItem_historial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_historial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/historial1.png"))); // NOI18N
        jMenuItem_historial.setText("Historial");
        jMenuItem_historial.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenuItem_historial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_historialActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_historial);

        jMenuBar1.add(jMenu4);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reportes.png"))); // NOI18N
        jMenu5.setText("Reportes");
        jMenu5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu5.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_reportes_usuarios.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_reportes_usuarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reporte1.png"))); // NOI18N
        jMenuItem_reportes_usuarios.setText("Reportes Usuarios");
        jMenuItem_reportes_usuarios.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenuItem_reportes_usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem_reportes_usuariosMousePressed(evt);
            }
        });
        jMenu5.add(jMenuItem_reportes_usuarios);

        jMenuItem_resportes_clientes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_resportes_clientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reporte1.png"))); // NOI18N
        jMenuItem_resportes_clientes.setText("Reportes Clientes");
        jMenuItem_resportes_clientes.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenuItem_resportes_clientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem_resportes_clientesMousePressed(evt);
            }
        });
        jMenu5.add(jMenuItem_resportes_clientes);

        jMenuItem_reportes_facturacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_reportes_facturacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reporte1.png"))); // NOI18N
        jMenuItem_reportes_facturacion.setText("Resportes Facturacion");
        jMenuItem_reportes_facturacion.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenu5.add(jMenuItem_reportes_facturacion);

        jMenuItem_reportes_transacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_reportes_transacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reporte1.png"))); // NOI18N
        jMenuItem_reportes_transacion.setText("Reportes Transaciones");
        jMenuItem_reportes_transacion.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenuItem_reportes_transacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem_reportes_transacionMousePressed(evt);
            }
        });
        jMenu5.add(jMenuItem_reportes_transacion);

        jMenuItem_reportes_trans_fecha.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_reportes_trans_fecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reporte1.png"))); // NOI18N
        jMenuItem_reportes_trans_fecha.setText("Reportes Trans. por fecha");
        jMenuItem_reportes_trans_fecha.setPreferredSize(new java.awt.Dimension(200, 30));
        jMenuItem_reportes_trans_fecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem_reportes_trans_fechaMousePressed(evt);
            }
        });
        jMenu5.add(jMenuItem_reportes_trans_fecha);

        jMenuBar1.add(jMenu5);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/configuraciones.png"))); // NOI18N
        jMenu6.setText("Configuración");
        jMenu6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu6.setPreferredSize(new java.awt.Dimension(150, 50));

        jMenuItem_general.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_general.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/configuraciones.png"))); // NOI18N
        jMenuItem_general.setText("General");
        jMenuItem_general.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenu6.add(jMenuItem_general);

        jMenuItem_empresa.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_empresa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/configuraciones.png"))); // NOI18N
        jMenuItem_empresa.setText("Empresa");
        jMenuItem_empresa.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenu6.add(jMenuItem_empresa);

        jMenuItem_facturacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jMenuItem_facturacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/configuraciones.png"))); // NOI18N
        jMenuItem_facturacion.setText("Factura");
        jMenuItem_facturacion.setPreferredSize(new java.awt.Dimension(150, 30));
        jMenuItem_facturacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_facturacionActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem_facturacion);

        jMenuBar1.add(jMenu6);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrar-sesion.png"))); // NOI18N
        jMenu7.setText("Cerrar Sesión");
        jMenu7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jMenu7.setPreferredSize(new java.awt.Dimension(150, 50));
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu7MousePressed(evt);
            }
        });
        jMenu7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu7KeyPressed(evt);
            }
        });
        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_historialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_historialActionPerformed
        InterHistorial interHistorial = new InterHistorial();
        JDesktopPane_menu.add(interHistorial);
        interHistorial.setVisible(true);
    }//GEN-LAST:event_jMenuItem_historialActionPerformed

    private void jMenuItem_facturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_facturacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem_facturacionActionPerformed

    private void jMenuItem_nuevo_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_nuevo_clienteActionPerformed
        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterCliente) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterCliente interCliente = new InterCliente();
            JDesktopPane_menu.add(interCliente);
            interCliente.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem_nuevo_clienteActionPerformed

    private void jMenuItem_nuevo_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_nuevo_usuarioActionPerformed
        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterUsuario) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterUsuario interUsuario = new InterUsuario();
            JDesktopPane_menu.add(interUsuario);
            interUsuario.setVisible(true);
        }


    }//GEN-LAST:event_jMenuItem_nuevo_usuarioActionPerformed

    private void jMenuItem_gestionar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_gestionar_clienteActionPerformed
        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterGestionarCliente) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterGestionarCliente interGestionarCliente = new InterGestionarCliente();
            JDesktopPane_menu.add(interGestionarCliente);
            interGestionarCliente.setVisible(true);
        }


    }//GEN-LAST:event_jMenuItem_gestionar_clienteActionPerformed

    private void jMenuItem_gestionar_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_gestionar_usuarioActionPerformed

        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterGestionarUsuario) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterGestionarUsuario interGestionarUsuario = new InterGestionarUsuario();
            JDesktopPane_menu.add(interGestionarUsuario);
            interGestionarUsuario.setVisible(true);
        }


    }//GEN-LAST:event_jMenuItem_gestionar_usuarioActionPerformed

    private void jMenuItem_nueva_facturacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_nueva_facturacionActionPerformed


    }//GEN-LAST:event_jMenuItem_nueva_facturacionActionPerformed

    private void jMenuItem_nueva_trasaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_nueva_trasaccionActionPerformed

        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterTransaccion) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterTransaccion interTransaccion = new InterTransaccion();
            interTransaccion.setNombreUsuario(nombreUsuario);
            JDesktopPane_menu.add(interTransaccion);
            interTransaccion.setVisible(true);
        }


    }//GEN-LAST:event_jMenuItem_nueva_trasaccionActionPerformed

    private void jMenuItem_gestionar_transaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_gestionar_transaccionActionPerformed
        boolean ventanaAbierta = false;
        JInternalFrame[] ventanas = JDesktopPane_menu.getAllFrames();

        for (JInternalFrame ventana : ventanas) {
            if (ventana instanceof InterGestionarTransaccion) {
                ventanaAbierta = true;
                break;
            }
        }

        if (!ventanaAbierta) {
            InterGestionarTransaccion interGestionarTransaccion = new InterGestionarTransaccion();
            JDesktopPane_menu.add(interGestionarTransaccion);
            interGestionarTransaccion.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem_gestionar_transaccionActionPerformed

    private void jMenu7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu7KeyPressed

    }//GEN-LAST:event_jMenu7KeyPressed

    private void jMenu7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MousePressed
        int option = JOptionPane.showConfirmDialog(this, "¿Estás seguro que deseas cerrar la sesión?", "Cerrar sesión", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // Cerrar sesión
            // Por ejemplo, puedes cerrar la ventana actual y abrir la ventana de inicio de sesión
            FrmLogin frmLogin = new FrmLogin();
            frmLogin.setVisible(true);
            this.dispose(); // Cierra la ventana actual
        }
    }//GEN-LAST:event_jMenu7MousePressed

    private void jMenuItem_reportes_transacionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_reportes_transacionMousePressed
        this.reporteTransaccion();


    }//GEN-LAST:event_jMenuItem_reportes_transacionMousePressed

    private void jMenuItem_resportes_clientesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_resportes_clientesMousePressed
        this.reporteCliente();
    }//GEN-LAST:event_jMenuItem_resportes_clientesMousePressed

    private void jMenuItem_reportes_usuariosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_reportes_usuariosMousePressed
        this.reporteUsuario();
    }//GEN-LAST:event_jMenuItem_reportes_usuariosMousePressed

    private void jMenuItem_reportes_trans_fechaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_reportes_trans_fechaMousePressed
        this.seleccionarRangoFecha();

    }//GEN-LAST:event_jMenuItem_reportes_trans_fechaMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_empresa;
    private javax.swing.JMenuItem jMenuItem_facturacion;
    private javax.swing.JMenuItem jMenuItem_general;
    private javax.swing.JMenuItem jMenuItem_gestionar_cliente;
    private javax.swing.JMenuItem jMenuItem_gestionar_facturacion;
    private javax.swing.JMenuItem jMenuItem_gestionar_transaccion;
    private javax.swing.JMenuItem jMenuItem_gestionar_usuario;
    private javax.swing.JMenuItem jMenuItem_historial;
    private javax.swing.JMenuItem jMenuItem_nueva_facturacion;
    private javax.swing.JMenuItem jMenuItem_nueva_trasaccion;
    private javax.swing.JMenuItem jMenuItem_nuevo_cliente;
    private javax.swing.JMenuItem jMenuItem_nuevo_usuario;
    private javax.swing.JMenuItem jMenuItem_reportes_facturacion;
    private javax.swing.JMenuItem jMenuItem_reportes_trans_fecha;
    private javax.swing.JMenuItem jMenuItem_reportes_transacion;
    private javax.swing.JMenuItem jMenuItem_reportes_usuarios;
    private javax.swing.JMenuItem jMenuItem_resportes_clientes;
    private javax.swing.JLabel label_horaSistema;
    private javax.swing.JLabel lblNombreUsuario;
    // End of variables declaration//GEN-END:variables

    private void reporteTransaccion() {

        Connection con = Conexion.conectar();
        try {
            // Consulta SQL
            String sql = "SELECT t.idTransaccion, c1.nombre AS 'Cliente Remitente', c2.nombre AS 'Cliente Destinatario', "
                    + "t.montoTransaccion, t.monedaRemitente, t.monedaDestinatario, t.tipoCambio, t.totalPagar, "
                    + "t.fechaHoraTransaccion, "
                    + "CASE "
                    + "    WHEN t.estado = 1 THEN 'Pagado' "
                    + "    ELSE 'No Pagado' "
                    + "END AS 'Estado' "
                    + "FROM tb_transaccion t "
                    + "JOIN tb_cliente c1 ON t.idClienteRemitente = c1.idCliente "
                    + "JOIN tb_cliente c2 ON t.idClienteDestinatario = c2.idCliente";

            // Ejecutar la consulta
            Statement st;
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Directorio donde se guardará el archivo PDF
            String directorio = "src/pdf/";
            File dir = new File(directorio);
            if (!dir.exists()) {
                dir.mkdirs(); // Crear directorio si no existe
            }

            Random rand = new Random();
            int idCodigo = rand.nextInt(10000) + 1;

            // Nombre del archivo PDF con el ID de la transacción
            String nombreArchivo = "reporte_transaccion_" + idCodigo + ".pdf";

            Image imagen = Image.getInstance("./src/img/logo.png"); // Cambia "ruta_de_la_imagen.jpg" por la ruta de tu imagen
            imagen.scaleAbsolute(100, 50); // Cambia el tamaño de la imagen según lo necesites
            imagen.setAlignment(Element.ALIGN_CENTER);

            //Rectangle r = new Rectangle(210, 400);
            Document documento = new Document(PageSize.LETTER);
            PdfWriter.getInstance(documento, new FileOutputStream(directorio + nombreArchivo));
            documento.open();

            // Fuente para los títulos
            Font fuententTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            // Fuente para los valores
            Font fuenteDescripcion = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);

            //salto de linea 
            Paragraph santoLinea = new Paragraph();
            santoLinea.add(new Paragraph(Chunk.NEWLINE));
            documento.add(santoLinea);

            // Título del ticket
            PdfPTable encabezadoTicket = new PdfPTable(1);
            encabezadoTicket.setWidthPercentage(100);
            float[] medidaCelda = {100f};
            encabezadoTicket.setWidths(medidaCelda);

            PdfPCell empresaticket = new PdfPCell(new Phrase("Reporte de Transacciónes", fuententTitulo));
            empresaticket.setVerticalAlignment(Element.ALIGN_CENTER);
            empresaticket.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresaticket.setBorder(0);

            PdfPCell empresa = new PdfPCell(new Phrase("Transfiereya", fuententTitulo));
            empresa.addElement(imagen);
            empresa.setVerticalAlignment(Element.ALIGN_CENTER);
            empresa.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresa.setBorder(0);

//            PdfPCell separador = new PdfPCell(new Phrase("---------------------------------------------", fuenteDescripcion));
//            separador.setVerticalAlignment(Element.ALIGN_CENTER);
//            separador.setHorizontalAlignment(Element.ALIGN_CENTER);
//            separador.setBorder(0);
            encabezadoTicket.addCell(empresaticket);
            encabezadoTicket.addCell(empresa);

            documento.add(encabezadoTicket);
            documento.add(santoLinea);

            // Contenido del ticket
            PdfPTable datosTransaccion = new PdfPTable(10);
            datosTransaccion.setWidthPercentage(100);
            float[] medidaCeldaTrans = {9f, 10f, 11f, 10f, 10f, 11f, 10f, 10f, 10f, 9f};
            datosTransaccion.setWidths(medidaCeldaTrans);

            // Títulos de las columnas
            String[] titulos = {"ID", "Cliente Remitente", "Cliente Destinatario", "Monto", "Moneda Remitente",
                "Moneda Destinatario", "Cambio", "Total a Pagar", "Fecha y Hora", "Estado"};
            Font fuenteTituloColumna = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
            for (String titulo : titulos) {
                PdfPCell tituloCell = new PdfPCell(new Phrase(titulo, fuenteTituloColumna));
                tituloCell.setVerticalAlignment(Element.ALIGN_CENTER);
                tituloCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tituloCell.setBorderWidth(1);
                datosTransaccion.addCell(tituloCell);
            }

            while (rs.next()) {
                String idTransaccion = rs.getString("idTransaccion");
                String clienteRemitente = rs.getString("Cliente Remitente");
                String clienteDestinatario = rs.getString("Cliente Destinatario");
                String montoTransaccion = rs.getString("montoTransaccion");
                String monedaRemitente = rs.getString("monedaRemitente");
                String monedaDestinatario = rs.getString("monedaDestinatario");
                String tipoCambio = rs.getString("tipoCambio");
                String totalPagar = rs.getString("totalPagar");
                String fechaHoraTransaccion = rs.getString("fechaHoraTransaccion");
                String estado = rs.getString("Estado");

                PdfPCell idTransaccionCell = new PdfPCell(new Phrase(idTransaccion, fuenteDescripcion));
                idTransaccionCell.setVerticalAlignment(Element.ALIGN_CENTER);
                idTransaccionCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                idTransaccionCell.setBorder(0);

                PdfPCell fecha = new PdfPCell(new Phrase(fechaHoraTransaccion, fuenteDescripcion));
                fecha.setVerticalAlignment(Element.ALIGN_CENTER);
                fecha.setHorizontalAlignment(Element.ALIGN_LEFT);
                fecha.setBorder(0);

                PdfPCell nombreClienteRCell = new PdfPCell(new Phrase(clienteRemitente, fuenteDescripcion));
                nombreClienteRCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreClienteRCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreClienteRCell.setBorder(0);

                PdfPCell nombreClienteDCell = new PdfPCell(new Phrase(clienteDestinatario, fuenteDescripcion));
                nombreClienteDCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreClienteDCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreClienteDCell.setBorder(0);

                PdfPCell montoValueCell = new PdfPCell(new Phrase(montoTransaccion, fuenteDescripcion));
                montoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                montoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                montoValueCell.setBorder(0);

                PdfPCell monedaRvalueCell = new PdfPCell(new Phrase(monedaRemitente, fuenteDescripcion));
                monedaRvalueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                monedaRvalueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                monedaRvalueCell.setBorder(0);

                PdfPCell monedaDValueCell = new PdfPCell(new Phrase(monedaDestinatario, fuenteDescripcion));
                monedaDValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                monedaDValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                monedaDValueCell.setBorder(0);

                PdfPCell cambioValueCell = new PdfPCell(new Phrase(tipoCambio, fuenteDescripcion));
                cambioValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                cambioValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cambioValueCell.setBorder(0);

                PdfPCell totalPagarValueCell = new PdfPCell(new Phrase(totalPagar, fuenteDescripcion));
                totalPagarValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                totalPagarValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                totalPagarValueCell.setBorder(0);

                PdfPCell estadoValueCell = new PdfPCell(new Phrase(estado, fuenteDescripcion));
                estadoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                estadoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                estadoValueCell.setBorder(0);

                datosTransaccion.addCell(idTransaccionCell);
                datosTransaccion.addCell(nombreClienteRCell);
                datosTransaccion.addCell(nombreClienteDCell);
                datosTransaccion.addCell(montoValueCell);
                datosTransaccion.addCell(monedaRvalueCell);
                datosTransaccion.addCell(monedaDValueCell);
                datosTransaccion.addCell(cambioValueCell);
                datosTransaccion.addCell(totalPagarValueCell);
                datosTransaccion.addCell(fecha);
                datosTransaccion.addCell(estadoValueCell);
            }

            documento.add(datosTransaccion);
            documento.add(santoLinea);

            Paragraph mensajeFinal = new Paragraph("''Final del Reporte''.", fuenteDescripcion);
            mensajeFinal.setAlignment(Element.ALIGN_CENTER);
            documento.add(mensajeFinal);

            documento.close();

            JOptionPane.showMessageDialog(null, "Reporte generado correctamente.");

            // Abrir el archivo PDF con la aplicación predeterminada
            File archivoPDF = new File(directorio + nombreArchivo);
            Desktop.getDesktop().open(archivoPDF);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error al generar Reporte: " + e.getMessage());
        }

    }

    // Agrega un campo para el nombre de usuario
    String nombreUsuario;

    // Método para establecer el nombre de usuario
    public void setNombreUsuario(String nombreUsuario) {
        this.nombreUsuario = nombreUsuario;
        lblNombreUsuario.setText("Bienvenido, " + nombreUsuario);
    }

    private void reporteCliente() {

        Connection con = Conexion.conectar();
        try {
            // Consulta SQL
            String sql = "SELECT idCliente, nombre, apellido, cedula, pais, telefono, direccion, estado "
                    + "FROM tb_cliente ";

            // Ejecutar la consulta
            Statement st;
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Directorio donde se guardará el archivo PDF
            String directorio = "src/pdf/";
            File dir = new File(directorio);
            if (!dir.exists()) {
                dir.mkdirs(); // Crear directorio si no existe
            }

            Random rand = new Random();
            int idCodigo = rand.nextInt(10000) + 1;

            // Nombre del archivo PDF con el ID de la transacción
            String nombreArchivo = "reporte_Cliente_" + idCodigo + ".pdf";

            Image imagen = Image.getInstance("./src/img/logo.png"); // Cambia "ruta_de_la_imagen.jpg" por la ruta de tu imagen
            imagen.scaleAbsolute(100, 50); // Cambia el tamaño de la imagen según lo necesites
            imagen.setAlignment(Element.ALIGN_CENTER);

            //Rectangle r = new Rectangle(210, 400);
            Document documento = new Document(PageSize.LETTER);
            PdfWriter.getInstance(documento, new FileOutputStream(directorio + nombreArchivo));
            documento.open();

            // Fuente para los títulos
            Font fuententTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            // Fuente para los valores
            Font fuenteDescripcion = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);

            //salto de linea 
            Paragraph santoLinea = new Paragraph();
            santoLinea.add(new Paragraph(Chunk.NEWLINE));
            documento.add(santoLinea);

            // Título del ticket
            PdfPTable encabezadoTicket = new PdfPTable(1);
            encabezadoTicket.setWidthPercentage(100);
            float[] medidaCelda = {100f};
            encabezadoTicket.setWidths(medidaCelda);

            PdfPCell empresaticket = new PdfPCell(new Phrase("Reporte de Clientes", fuententTitulo));
            empresaticket.setVerticalAlignment(Element.ALIGN_CENTER);
            empresaticket.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresaticket.setBorder(0);

            PdfPCell empresa = new PdfPCell(new Phrase("Transfiereya", fuententTitulo));
            empresa.addElement(imagen);
            empresa.setVerticalAlignment(Element.ALIGN_CENTER);
            empresa.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresa.setBorder(0);

//            PdfPCell separador = new PdfPCell(new Phrase("---------------------------------------------", fuenteDescripcion));
//            separador.setVerticalAlignment(Element.ALIGN_CENTER);
//            separador.setHorizontalAlignment(Element.ALIGN_CENTER);
//            separador.setBorder(0);
            encabezadoTicket.addCell(empresaticket);
            encabezadoTicket.addCell(empresa);

            documento.add(encabezadoTicket);
            documento.add(santoLinea);

            // Contenido del ticket
            PdfPTable datosCliente = new PdfPTable(8);
            datosCliente.setWidthPercentage(100);
            float[] medidaCeldaTrans = {9f, 12f, 12f, 12f, 15f, 12f, 15f, 9f};
            datosCliente.setWidths(medidaCeldaTrans);

            // Títulos de las columnas
            String[] titulos = {"ID", "Nombre", "Apellido", "Cedula", "Pais",
                "Telefono", "Direccion", "Estado"};

            Font fuenteTituloColumna = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
            for (String titulo : titulos) {
                PdfPCell tituloCell = new PdfPCell(new Phrase(titulo, fuenteTituloColumna));
                tituloCell.setVerticalAlignment(Element.ALIGN_CENTER);
                tituloCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tituloCell.setBorderWidth(1);
                datosCliente.addCell(tituloCell);
            }

            while (rs.next()) {
                String idCliente = rs.getString("idCliente");
                String nombre = rs.getString("nombre");
                String apellido = rs.getString("apellido");
                String cedula = rs.getString("cedula");
                String pais = rs.getString("pais");
                String telefono = rs.getString("telefono");
                String direccion = rs.getString("direccion");
                String estado = rs.getString("Estado");

                PdfPCell idClienteCell = new PdfPCell(new Phrase(idCliente, fuenteDescripcion));
                idClienteCell.setVerticalAlignment(Element.ALIGN_CENTER);
                idClienteCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                idClienteCell.setBorder(0);

                PdfPCell nombreCell = new PdfPCell(new Phrase(nombre, fuenteDescripcion));
                nombreCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreCell.setBorder(0);

                PdfPCell apellidoCell = new PdfPCell(new Phrase(apellido, fuenteDescripcion));
                apellidoCell.setVerticalAlignment(Element.ALIGN_CENTER);
                apellidoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                apellidoCell.setBorder(0);

                PdfPCell cedulaCell = new PdfPCell(new Phrase(cedula, fuenteDescripcion));
                cedulaCell.setVerticalAlignment(Element.ALIGN_CENTER);
                cedulaCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cedulaCell.setBorder(0);

                PdfPCell paisCell = new PdfPCell(new Phrase(pais, fuenteDescripcion));
                paisCell.setVerticalAlignment(Element.ALIGN_CENTER);
                paisCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                paisCell.setBorder(0);

                PdfPCell telefonoCell = new PdfPCell(new Phrase(telefono, fuenteDescripcion));
                telefonoCell.setVerticalAlignment(Element.ALIGN_CENTER);
                telefonoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                telefonoCell.setBorder(0);

                PdfPCell direccionCell = new PdfPCell(new Phrase(direccion, fuenteDescripcion));
                direccionCell.setVerticalAlignment(Element.ALIGN_CENTER);
                direccionCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                direccionCell.setBorder(0);

                PdfPCell estadoValueCell = new PdfPCell(new Phrase(estado, fuenteDescripcion));
                estadoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                estadoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                estadoValueCell.setBorder(0);

                datosCliente.addCell(idClienteCell);
                datosCliente.addCell(nombreCell);
                datosCliente.addCell(apellidoCell);
                datosCliente.addCell(cedulaCell);
                datosCliente.addCell(paisCell);
                datosCliente.addCell(telefonoCell);

                datosCliente.addCell(direccionCell);
                datosCliente.addCell(estadoValueCell);
            }

            documento.add(datosCliente);
            documento.add(santoLinea);

            Paragraph mensajeFinal = new Paragraph("''Final del Reporte''.", fuenteDescripcion);
            mensajeFinal.setAlignment(Element.ALIGN_CENTER);
            documento.add(mensajeFinal);

            documento.close();

            JOptionPane.showMessageDialog(null, "Reporte generado correctamente.");

            // Abrir el archivo PDF con la aplicación predeterminada
            File archivoPDF = new File(directorio + nombreArchivo);
            Desktop.getDesktop().open(archivoPDF);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error al generar Reporte: " + e.getMessage());
        }

    }

    private void reporteUsuario() {

        Connection con = Conexion.conectar();
        try {
            // Consulta SQL
            String sql = "SELECT idUsuario, nombre, apellido,usuario, password, telefono, rolUsuario, estado "
                    + "FROM tb_usuario ";

            // Ejecutar la consulta
            Statement st;
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Directorio donde se guardará el archivo PDF
            String directorio = "src/pdf/";
            File dir = new File(directorio);
            if (!dir.exists()) {
                dir.mkdirs(); // Crear directorio si no existe
            }

            Random rand = new Random();
            int idCodigo = rand.nextInt(10000) + 1;

            // Nombre del archivo PDF con el ID de la transacción
            String nombreArchivo = "reporte_Usuario_" + idCodigo + ".pdf";

            Image imagen = Image.getInstance("./src/img/logo.png"); // Cambia "ruta_de_la_imagen.jpg" por la ruta de tu imagen
            imagen.scaleAbsolute(100, 50); // Cambia el tamaño de la imagen según lo necesites
            imagen.setAlignment(Element.ALIGN_CENTER);

            //Rectangle r = new Rectangle(210, 400);
            Document documento = new Document(PageSize.LETTER);
            PdfWriter.getInstance(documento, new FileOutputStream(directorio + nombreArchivo));
            documento.open();

            // Fuente para los títulos
            Font fuententTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            // Fuente para los valores
            Font fuenteDescripcion = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);

            //salto de linea 
            Paragraph santoLinea = new Paragraph();
            santoLinea.add(new Paragraph(Chunk.NEWLINE));
            documento.add(santoLinea);

            // Título del ticket
            PdfPTable encabezadoTicket = new PdfPTable(1);
            encabezadoTicket.setWidthPercentage(100);
            float[] medidaCelda = {100f};
            encabezadoTicket.setWidths(medidaCelda);

            PdfPCell empresaticket = new PdfPCell(new Phrase("Reporte de Usuarios", fuententTitulo));
            empresaticket.setVerticalAlignment(Element.ALIGN_CENTER);
            empresaticket.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresaticket.setBorder(0);

            PdfPCell empresa = new PdfPCell(new Phrase("Transfiereya", fuententTitulo));
            empresa.addElement(imagen);
            empresa.setVerticalAlignment(Element.ALIGN_CENTER);
            empresa.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresa.setBorder(0);

//            PdfPCell separador = new PdfPCell(new Phrase("---------------------------------------------", fuenteDescripcion));
//            separador.setVerticalAlignment(Element.ALIGN_CENTER);
//            separador.setHorizontalAlignment(Element.ALIGN_CENTER);
//            separador.setBorder(0);
            encabezadoTicket.addCell(empresaticket);
            encabezadoTicket.addCell(empresa);

            documento.add(encabezadoTicket);
            documento.add(santoLinea);

            // Contenido del ticket
            PdfPTable datosUsuario = new PdfPTable(8);
            datosUsuario.setWidthPercentage(100);
            float[] medidaCeldaTrans = {9f, 12f, 12f, 12f, 15f, 12f, 15f, 9f};
            datosUsuario.setWidths(medidaCeldaTrans);

            // Títulos de las columnas
            String[] titulos = {"ID", "Nombre", "Apellido", "Usuario", "Password",
                "Telefono", "RolUsuario", "Estado"};

            Font fuenteTituloColumna = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
            for (String titulo : titulos) {
                PdfPCell tituloCell = new PdfPCell(new Phrase(titulo, fuenteTituloColumna));
                tituloCell.setVerticalAlignment(Element.ALIGN_CENTER);
                tituloCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tituloCell.setBorderWidth(1);
                datosUsuario.addCell(tituloCell);
            }

            while (rs.next()) {
                String idUsuario = rs.getString("idUsuario");
                String nombre = rs.getString("nombre");
                String apellido = rs.getString("apellido");
                String usuario = rs.getString("usuario");
                String password = rs.getString("password");
                String telefono = rs.getString("telefono");
                String rolUsuario = rs.getString("rolUsuario");
                String estado = rs.getString("estado");

                PdfPCell idUsuarioCell = new PdfPCell(new Phrase(idUsuario, fuenteDescripcion));
                idUsuarioCell.setVerticalAlignment(Element.ALIGN_CENTER);
                idUsuarioCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                idUsuarioCell.setBorder(0);

                PdfPCell nombreCell = new PdfPCell(new Phrase(nombre, fuenteDescripcion));
                nombreCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreCell.setBorder(0);

                PdfPCell apellidoCell = new PdfPCell(new Phrase(apellido, fuenteDescripcion));
                apellidoCell.setVerticalAlignment(Element.ALIGN_CENTER);
                apellidoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                apellidoCell.setBorder(0);

                PdfPCell usuarioCell = new PdfPCell(new Phrase(usuario, fuenteDescripcion));
                usuarioCell.setVerticalAlignment(Element.ALIGN_CENTER);
                usuarioCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                usuarioCell.setBorder(0);

                PdfPCell passwordCell = new PdfPCell(new Phrase(password, fuenteDescripcion));
                passwordCell.setVerticalAlignment(Element.ALIGN_CENTER);
                passwordCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                passwordCell.setBorder(0);

                PdfPCell telefonoCell = new PdfPCell(new Phrase(telefono, fuenteDescripcion));
                telefonoCell.setVerticalAlignment(Element.ALIGN_CENTER);
                telefonoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                telefonoCell.setBorder(0);

                PdfPCell rolUsuarioCell = new PdfPCell(new Phrase(rolUsuario, fuenteDescripcion));
                rolUsuarioCell.setVerticalAlignment(Element.ALIGN_CENTER);
                rolUsuarioCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                rolUsuarioCell.setBorder(0);

                PdfPCell estadoValueCell = new PdfPCell(new Phrase(estado, fuenteDescripcion));
                estadoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                estadoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                estadoValueCell.setBorder(0);

                datosUsuario.addCell(idUsuarioCell);
                datosUsuario.addCell(nombreCell);
                datosUsuario.addCell(apellidoCell);
                datosUsuario.addCell(usuarioCell);
                datosUsuario.addCell(passwordCell);
                datosUsuario.addCell(telefonoCell);
                datosUsuario.addCell(rolUsuarioCell);
                datosUsuario.addCell(estadoValueCell);
            }

            documento.add(datosUsuario);
            documento.add(santoLinea);

            Paragraph mensajeFinal = new Paragraph("''Final del Reporte''.", fuenteDescripcion);
            mensajeFinal.setAlignment(Element.ALIGN_CENTER);
            documento.add(mensajeFinal);

            documento.close();

            JOptionPane.showMessageDialog(null, "Reporte generado correctamente.");

            // Abrir el archivo PDF con la aplicación predeterminada
            File archivoPDF = new File(directorio + nombreArchivo);
            Desktop.getDesktop().open(archivoPDF);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error al generar Reporte: " + e.getMessage());
        }
    }

    private void seleccionarRangoFecha() {
        JDateChooser dateChooserInicio = new JDateChooser();
        dateChooserInicio.setDateFormatString("yyyy-MM-dd");

        JDateChooser dateChooserFin = new JDateChooser();
        dateChooserFin.setDateFormatString("yyyy-MM-dd");

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 2));
        panel.add(new JLabel("Fecha inicio:"));
        panel.add(dateChooserInicio);
        panel.add(new JLabel("Fecha fin:"));
        panel.add(dateChooserFin);

        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccione un rango de fechas",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            Date fechaInicio = dateChooserInicio.getDate();
            Date fechaFin = dateChooserFin.getDate();

            if (fechaInicio != null && fechaFin != null) {
                reporteTransFecha(fechaInicio, fechaFin);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un rango de fechas válido.");
                this.seleccionarRangoFecha();
            }
        }
    }

    private void reporteTransFecha(Date fechaInicio, Date fechaFin) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaInicioStr = sdf.format(fechaInicio);
        String fechaFinStr = sdf.format(fechaFin);

        try {
            if (fechaInicio == null || fechaFin == null) {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un rango de fechas.");
                return;
            }

            Connection con = Conexion.conectar();
            String sql = "SELECT t.idTransaccion, c1.nombre AS 'Cliente Remitente', c2.nombre AS 'Cliente Destinatario', "
                    + "t.montoTransaccion, t.monedaRemitente, t.monedaDestinatario, t.tipoCambio, t.totalPagar, "
                    + "t.fechaHoraTransaccion, "
                    + "CASE "
                    + "    WHEN t.estado = 1 THEN 'Pagado' "
                    + "    ELSE 'No Pagado' "
                    + "END AS 'Estado' "
                    + "FROM tb_transaccion t "
                    + "JOIN tb_cliente c1 ON t.idClienteRemitente = c1.idCliente "
                    + "JOIN tb_cliente c2 ON t.idClienteDestinatario = c2.idCliente "
                    + "WHERE t.fechaHoraTransaccion BETWEEN '" + fechaInicioStr + " 00:00:00' AND '" + fechaFinStr + " 23:59:59'";

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            String directorio = "src/pdf/";
            File dir = new File(directorio);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            Random rand = new Random();
            int idCodigo = rand.nextInt(10000) + 1;

            // Nombre del archivo PDF con el ID de la transacción
            String nombreArchivo = "reporte_transaccion_Fecha_" + idCodigo + ".pdf";

            Image imagen = Image.getInstance("./src/img/logo.png"); // Cambia "ruta_de_la_imagen.jpg" por la ruta de tu imagen
            imagen.scaleAbsolute(100, 50); // Cambia el tamaño de la imagen según lo necesites
            imagen.setAlignment(Element.ALIGN_CENTER);

            Document documento = new Document(PageSize.LETTER);
            PdfWriter.getInstance(documento, new FileOutputStream(directorio + nombreArchivo));
            documento.open();

            //Fuente para los títulos
            Font fuententTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            //  Fuente para los valores
            Font fuenteDescripcion = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);

            //salto de linea 
            Paragraph santoLinea = new Paragraph();
            santoLinea.add(new Paragraph(Chunk.NEWLINE));
            documento.add(santoLinea);

            //Título del ticket
            PdfPTable encabezadoTicket = new PdfPTable(1);
            encabezadoTicket.setWidthPercentage(100);
            float[] medidaCelda = {100f};
            encabezadoTicket.setWidths(medidaCelda);

            PdfPCell empresaticket = new PdfPCell(new Phrase("Reporte de Transacciónes desde : " + fechaInicioStr + " a " + fechaFinStr + "", fuententTitulo));
            empresaticket.setVerticalAlignment(Element.ALIGN_CENTER);
            empresaticket.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresaticket.setBorder(0);

            PdfPCell empresa = new PdfPCell(new Phrase("Transfiereya", fuententTitulo));
            empresa.addElement(imagen);
            empresa.setVerticalAlignment(Element.ALIGN_CENTER);
            empresa.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresa.setBorder(0);

            PdfPCell separador = new PdfPCell(new Phrase("---------------------------------------------", fuenteDescripcion));
            separador.setVerticalAlignment(Element.ALIGN_CENTER);
            separador.setHorizontalAlignment(Element.ALIGN_CENTER);
            separador.setBorder(0);
            encabezadoTicket.addCell(empresaticket);
            encabezadoTicket.addCell(empresa);

            documento.add(encabezadoTicket);
            documento.add(santoLinea);

            // Contenido del ticket
            PdfPTable datosTransaccion = new PdfPTable(10);
            datosTransaccion.setWidthPercentage(100);
            float[] medidaCeldaTrans = {9f, 10f, 11f, 10f, 10f, 11f, 10f, 10f, 10f, 9f};
            datosTransaccion.setWidths(medidaCeldaTrans);

            //Títulos de las columnas
            String[] titulos = {"ID", "Cliente Remitente", "Cliente Destinatario", "Monto", "Moneda Remitente",
                "Moneda Destinatario", "Cambio", "Total a Pagar", "Fecha y Hora", "Estado"};
            Font fuenteTituloColumna = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
            for (String titulo : titulos) {
                PdfPCell tituloCell = new PdfPCell(new Phrase(titulo, fuenteTituloColumna));
                tituloCell.setVerticalAlignment(Element.ALIGN_CENTER);
                tituloCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tituloCell.setBorderWidth(1);
                datosTransaccion.addCell(tituloCell);
            }

            while (rs.next()) {
                String idTransaccion = rs.getString("idTransaccion");
                String clienteRemitente = rs.getString("Cliente Remitente");
                String clienteDestinatario = rs.getString("Cliente Destinatario");
                String montoTransaccion = rs.getString("montoTransaccion");
                String monedaRemitente = rs.getString("monedaRemitente");
                String monedaDestinatario = rs.getString("monedaDestinatario");
                String tipoCambio = rs.getString("tipoCambio");
                String totalPagar = rs.getString("totalPagar");
                String fechaHoraTransaccion = rs.getString("fechaHoraTransaccion");
                String estado = rs.getString("Estado");

                PdfPCell idTransaccionCell = new PdfPCell(new Phrase(idTransaccion, fuenteDescripcion));
                idTransaccionCell.setVerticalAlignment(Element.ALIGN_CENTER);
                idTransaccionCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                idTransaccionCell.setBorder(0);

                PdfPCell fecha = new PdfPCell(new Phrase(fechaHoraTransaccion, fuenteDescripcion));
                fecha.setVerticalAlignment(Element.ALIGN_CENTER);
                fecha.setHorizontalAlignment(Element.ALIGN_LEFT);
                fecha.setBorder(0);

                PdfPCell nombreClienteRCell = new PdfPCell(new Phrase(clienteRemitente, fuenteDescripcion));
                nombreClienteRCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreClienteRCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreClienteRCell.setBorder(0);

                PdfPCell nombreClienteDCell = new PdfPCell(new Phrase(clienteDestinatario, fuenteDescripcion));
                nombreClienteDCell.setVerticalAlignment(Element.ALIGN_CENTER);
                nombreClienteDCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                nombreClienteDCell.setBorder(0);

                PdfPCell montoValueCell = new PdfPCell(new Phrase(montoTransaccion, fuenteDescripcion));
                montoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                montoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                montoValueCell.setBorder(0);

                PdfPCell monedaRvalueCell = new PdfPCell(new Phrase(monedaRemitente, fuenteDescripcion));
                monedaRvalueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                monedaRvalueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                monedaRvalueCell.setBorder(0);

                PdfPCell monedaDValueCell = new PdfPCell(new Phrase(monedaDestinatario, fuenteDescripcion));
                monedaDValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                monedaDValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                monedaDValueCell.setBorder(0);

                PdfPCell cambioValueCell = new PdfPCell(new Phrase(tipoCambio, fuenteDescripcion));
                cambioValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                cambioValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cambioValueCell.setBorder(0);

                PdfPCell totalPagarValueCell = new PdfPCell(new Phrase(totalPagar, fuenteDescripcion));
                totalPagarValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                totalPagarValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                totalPagarValueCell.setBorder(0);

                PdfPCell estadoValueCell = new PdfPCell(new Phrase(estado, fuenteDescripcion));
                estadoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
                estadoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
                estadoValueCell.setBorder(0);

                datosTransaccion.addCell(idTransaccionCell);
                datosTransaccion.addCell(nombreClienteRCell);
                datosTransaccion.addCell(nombreClienteDCell);
                datosTransaccion.addCell(montoValueCell);
                datosTransaccion.addCell(monedaRvalueCell);
                datosTransaccion.addCell(monedaDValueCell);
                datosTransaccion.addCell(cambioValueCell);
                datosTransaccion.addCell(totalPagarValueCell);
                datosTransaccion.addCell(fecha);
                datosTransaccion.addCell(estadoValueCell);
            }

            documento.add(datosTransaccion);
            documento.add(santoLinea);

            Paragraph mensajeFinal = new Paragraph("''Final del Reporte''.", fuenteDescripcion);
            mensajeFinal.setAlignment(Element.ALIGN_CENTER);
            documento.add(mensajeFinal);

            documento.close();

            JOptionPane.showMessageDialog(null, "Reporte generado correctamente.");

            // Abrir el archivo PDF con la aplicación predeterminada
            File archivoPDF = new File(directorio + nombreArchivo);
            Desktop.getDesktop().open(archivoPDF);

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error al generar Reporte: " + e.getMessage());
        }

    }

}
