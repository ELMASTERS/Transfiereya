package vista;

import com.itextpdf.text.Chunk;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import conexion.Conexion;
import controlador.Ctrl_Transaccion;
import controlador.Ctrl_Transaccion.TransaccionException;
import java.awt.Color;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.Timer;

import modelo.Transaccion;

/**
 *
 * @author mcabral
 */
public class InterTransaccion extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterTransaccion
     */
    public InterTransaccion() {

        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Menu Transaccion");

        this.cargarComboClientes();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

        txt_usd.setText(String.format("%.4f", Ctrl_Transaccion.obtenerTasaUSD_TO_DOP()));
        txt_EUR.setText(String.format("%.4f", Ctrl_Transaccion.obtenerTasaEUR_TO_DOP()));

        Timer timer2 = new Timer(1000, e -> {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
            jLabel_fechaHora.setText(dateFormat.format(new Date()));
        });
        timer2.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_clienteR = new javax.swing.JComboBox<>();
        txt_cliente_buscarR = new javax.swing.JTextField();
        jButton_buscar_clienteR = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_clienteD = new javax.swing.JComboBox<>();
        txt_cliente_buscarD = new javax.swing.JTextField();
        jButton_buscar_clienteD = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_monto = new javax.swing.JTextField();
        jComboBox_moneda_r = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBox_moneda_d = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_cambio = new javax.swing.JTextField();
        jLabel_fechaHora = new javax.swing.JLabel();
        jButton_calcular = new javax.swing.JButton();
        jButton_imprimir = new javax.swing.JButton();
        txt_itbs = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_totalPagar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox_paisR = new javax.swing.JComboBox<>();
        jComboBox_paisD = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txt_usd = new javax.swing.JTextField();
        txt_EUR = new javax.swing.JTextField();
        jLabel_fecha_actulizada = new javax.swing.JLabel();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/categorias.png"))); // NOI18N
        jLabel1.setText("Nueva Transaccion");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cliente Remitente:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        jComboBox_clienteR.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_clienteR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione el Cliente:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_clienteR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_clienteRActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_clienteR, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 210, -1));

        txt_cliente_buscarR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cliente_buscarRActionPerformed(evt);
            }
        });
        txt_cliente_buscarR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cliente_buscarRKeyPressed(evt);
            }
        });
        getContentPane().add(txt_cliente_buscarR, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 210, -1));

        jButton_buscar_clienteR.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_buscar_clienteR.setText("Buscar");
        jButton_buscar_clienteR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_clienteRActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscar_clienteR, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Destinatario:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        jComboBox_clienteD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_clienteD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione el Cliente:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_clienteD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_clienteDActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_clienteD, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 210, -1));

        txt_cliente_buscarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cliente_buscarDActionPerformed(evt);
            }
        });
        txt_cliente_buscarD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cliente_buscarDKeyPressed(evt);
            }
        });
        getContentPane().add(txt_cliente_buscarD, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 210, -1));

        jButton_buscar_clienteD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_buscar_clienteD.setText("Buscar");
        jButton_buscar_clienteD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_clienteDActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscar_clienteD, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 400));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Monto:");

        txt_monto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jComboBox_moneda_r.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_moneda_r.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "EUR", "DOP" }));
        jComboBox_moneda_r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_moneda_rActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Moneda Remitente:");

        jComboBox_moneda_d.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_moneda_d.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "EUR", "DOP" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Moneda Destinatario:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Cambio$:");

        txt_cambio.setEditable(false);
        txt_cambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel_fechaHora.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel_fechaHora.setText("fechaHoraTransaccion");

        jButton_calcular.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_calcular.setText("CALCULAR");
        jButton_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcularActionPerformed(evt);
            }
        });

        jButton_imprimir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_imprimir.setText("IMPRIMIR");
        jButton_imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_imprimirActionPerformed(evt);
            }
        });

        txt_itbs.setEditable(false);
        txt_itbs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("DGII 5%:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Total a Pagar:");

        txt_totalPagar.setEditable(false);
        txt_totalPagar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Pais R:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Pais D:");

        jComboBox_paisR.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_paisR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione el PaisR:" }));
        jComboBox_paisR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_paisRActionPerformed(evt);
            }
        });

        jComboBox_paisD.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_paisD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione el PaisD:" }));
        jComboBox_paisD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_paisDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel_fechaHora)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox_moneda_r, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_moneda_d, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jButton_calcular)
                                .addGap(228, 228, 228)
                                .addComponent(jButton_imprimir)))
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_paisR, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_paisD, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_totalPagar)
                                    .addComponent(txt_cambio)
                                    .addComponent(txt_itbs, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel_fechaHora))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_moneda_r, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_moneda_d, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox_paisR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox_paisD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_cambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_itbs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txt_totalPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_imprimir)
                    .addComponent(jButton_calcular))
                .addGap(34, 34, 34))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 480, 400));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("TASA DE CAMBIO");

        jLabel15.setText("USD:");

        jLabel16.setText("EUR:");

        txt_usd.setEditable(false);

        txt_EUR.setEditable(false);

        jLabel_fecha_actulizada.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel_fecha_actulizada.setText("Actulizado al: FECHA");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_fecha_actulizada))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(17, 17, 17)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txt_usd, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                    .addComponent(txt_EUR))))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txt_usd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(txt_EUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel_fecha_actulizada)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 150, 160, 170));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_clienteRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_clienteRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_clienteRActionPerformed

    private void jComboBox_clienteDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_clienteDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_clienteDActionPerformed

    private void jComboBox_moneda_rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_moneda_rActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_moneda_rActionPerformed

    private void jButton_buscar_clienteRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_clienteRActionPerformed

        String clienteBuscar = txt_cliente_buscarR.getText().trim();

        if (clienteBuscar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de búsqueda", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Connection cn = Conexion.conectar();
        String sql = "SELECT  nombre, apellido, cedula FROM tb_cliente WHERE cedula = '" + clienteBuscar + "' OR nombre LIKE '%" + clienteBuscar + "%' OR apellido LIKE '%" + clienteBuscar + "%'";

        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                jComboBox_clienteR.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));

            } else {
                jComboBox_clienteR.setSelectedItem("Selecione el Cliente:");

                JOptionPane.showMessageDialog(null, "cedula de cliente incorrecta o no encontrada");

            }
            txt_cliente_buscarR.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar Cliente" + e);
        }


    }//GEN-LAST:event_jButton_buscar_clienteRActionPerformed

    private void jButton_buscar_clienteDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_clienteDActionPerformed
        String clienteBuscar = txt_cliente_buscarD.getText().trim();

        if (clienteBuscar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de búsqueda", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Connection cn = Conexion.conectar();
        String sql = "SELECT  nombre, apellido, cedula FROM tb_cliente WHERE cedula = '" + clienteBuscar + "' OR nombre LIKE '%" + clienteBuscar + "%' OR apellido LIKE '%" + clienteBuscar + "%'";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                jComboBox_clienteD.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));

            } else {
                jComboBox_clienteD.setSelectedItem("Selecione el Cliente:");

                JOptionPane.showMessageDialog(null, "cedula de cliente incorrecta o no encontrada");

            }
            txt_cliente_buscarD.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar Cliente" + e);
        }
    }//GEN-LAST:event_jButton_buscar_clienteDActionPerformed

    private void jButton_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcularActionPerformed
        this.convertirMoneda();
    }//GEN-LAST:event_jButton_calcularActionPerformed

    private void txt_cliente_buscarRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cliente_buscarRKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {

            String clienteBuscar = txt_cliente_buscarR.getText().trim();

            if (clienteBuscar.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de búsqueda", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Connection cn = Conexion.conectar();
            String sql = "SELECT  nombre, apellido, cedula FROM tb_cliente WHERE cedula = '" + clienteBuscar + "' OR nombre LIKE '%" + clienteBuscar + "%' OR apellido LIKE '%" + clienteBuscar + "%'";

            Statement st;

            try {
                st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if (rs.next()) {
                    jComboBox_clienteR.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));

                } else {
                    jComboBox_clienteR.setSelectedItem("Selecione el Cliente:");

                    JOptionPane.showMessageDialog(null, "cedula de cliente incorrecta o no encontrada");

                }
                txt_cliente_buscarR.setText("");
                cn.close();
            } catch (SQLException e) {
                System.out.println("Error al buscar Cliente" + e);
            }

        }

    }//GEN-LAST:event_txt_cliente_buscarRKeyPressed

    private void txt_cliente_buscarRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cliente_buscarRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cliente_buscarRActionPerformed

    private void txt_cliente_buscarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cliente_buscarDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cliente_buscarDActionPerformed

    private void txt_cliente_buscarDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cliente_buscarDKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {

            String clienteBuscar = txt_cliente_buscarD.getText().trim();

            if (clienteBuscar.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de búsqueda", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Connection cn = Conexion.conectar();
            String sql = "SELECT  nombre, apellido, cedula FROM tb_cliente WHERE cedula = '" + clienteBuscar + "' OR nombre LIKE '%" + clienteBuscar + "%' OR apellido LIKE '%" + clienteBuscar + "%'";
            Statement st;

            try {
                st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if (rs.next()) {
                    jComboBox_clienteD.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));

                } else {
                    jComboBox_clienteD.setSelectedItem("Selecione el Cliente:");

                    JOptionPane.showMessageDialog(null, "cedula de cliente incorrecta o no encontrada");

                }
                txt_cliente_buscarD.setText("");
                cn.close();
            } catch (SQLException e) {
                System.out.println("Error al buscar Cliente" + e);
            }

        }

    }//GEN-LAST:event_txt_cliente_buscarDKeyPressed

    private void jComboBox_paisRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_paisRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_paisRActionPerformed

    private void jComboBox_paisDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_paisDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_paisDActionPerformed

    private void jButton_imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_imprimirActionPerformed
        this.imprimirTicket();
    }//GEN-LAST:event_jButton_imprimirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_buscar_clienteD;
    private javax.swing.JButton jButton_buscar_clienteR;
    private javax.swing.JButton jButton_calcular;
    private javax.swing.JButton jButton_imprimir;
    private javax.swing.JComboBox<String> jComboBox_clienteD;
    private javax.swing.JComboBox<String> jComboBox_clienteR;
    private javax.swing.JComboBox<String> jComboBox_moneda_d;
    private javax.swing.JComboBox<String> jComboBox_moneda_r;
    private javax.swing.JComboBox<String> jComboBox_paisD;
    private javax.swing.JComboBox<String> jComboBox_paisR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_fechaHora;
    private javax.swing.JLabel jLabel_fecha_actulizada;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField txt_EUR;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cliente_buscarD;
    private javax.swing.JTextField txt_cliente_buscarR;
    private javax.swing.JTextField txt_itbs;
    private javax.swing.JTextField txt_monto;
    private javax.swing.JTextField txt_totalPagar;
    private javax.swing.JTextField txt_usd;
    // End of variables declaration//GEN-END:variables

//metodo para cargar clientes
//    private void cargarComboClientes() {
//        Connection cn = Conexion.conectar();
//
//        String sql = "select * from tb_cliente";
//   
//
//        Statement st;
//
//        try {
//
//            st = cn.createStatement();
//            ResultSet rs = st.executeQuery(sql);
//            jComboBox_clienteR.removeAllItems();
//            jComboBox_clienteD.removeAllItems();
//            jComboBox_clienteR.addItem("Selecione el Cliente:");
//            jComboBox_clienteD.addItem("Selecione el Cliente:");
//
//            while (rs.next()) {
//
//                jComboBox_clienteR.addItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));
//                jComboBox_clienteD.addItem(rs.getString("nombre") + " " + rs.getString("apellido") + " - " + rs.getString("cedula"));
//                jComboBox_paisR.addItem(rs.getString("pais"));
//                jComboBox_paisD.addItem(rs.getString("pais"));
//            }
//            cn.close();
//
//        } catch (SQLException e) {
//            System.out.println("error al cargar Clientes" + e);
//        }
//
//    }
    private void cargarComboClientes() {
        Connection cn = Conexion.conectar();

        String sqlClientes = "SELECT * FROM tb_cliente";
        String sqlPaises = "SELECT DISTINCT UPPER(pais) AS pais FROM tb_cliente";

        Statement stClientes;
        Statement stPaises;

        try {
            stClientes = cn.createStatement();
            ResultSet rsClientes = stClientes.executeQuery(sqlClientes);
            jComboBox_clienteR.removeAllItems();
            jComboBox_clienteD.removeAllItems();
            jComboBox_clienteR.addItem("Seleccione el Cliente:");
            jComboBox_clienteD.addItem("Seleccione el Cliente:");

            while (rsClientes.next()) {
                jComboBox_clienteR.addItem(rsClientes.getString("nombre") + " " + rsClientes.getString("apellido") + " - " + rsClientes.getString("cedula"));
                jComboBox_clienteD.addItem(rsClientes.getString("nombre") + " " + rsClientes.getString("apellido") + " - " + rsClientes.getString("cedula"));
            }

            stPaises = cn.createStatement();
            ResultSet rsPaises = stPaises.executeQuery(sqlPaises);
            jComboBox_paisR.removeAllItems();
            jComboBox_paisD.removeAllItems();
            jComboBox_paisR.addItem("Seleccione el País:");
            jComboBox_paisD.addItem("Seleccione el País:");

            while (rsPaises.next()) {
                jComboBox_paisR.addItem(rsPaises.getString("pais"));
                jComboBox_paisD.addItem(rsPaises.getString("pais"));
            }

            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar Clientes y Países: " + e);
        }
    }

    private void convertirMoneda() {
        try {
            // Verificar si el campo de texto de la cantidad está vacío
            if (txt_monto.getText().isEmpty()) {
                throw new NumberFormatException("El campo de la cantidad está vacío");
            }

            double cantidad = Double.parseDouble(txt_monto.getText());
            String monedaDe = (String) jComboBox_moneda_r.getSelectedItem();
            String monedaA = (String) jComboBox_moneda_d.getSelectedItem();
            double resultado = Ctrl_Transaccion.convertir(cantidad, monedaDe, monedaA);
            double cambio = resultado;
            double itbs = resultado * 0.05;
            double totalPagar = cambio - itbs;

            txt_cambio.setText(String.format("%.2f", cambio));
            txt_cambio.setBackground(Color.green);
            txt_itbs.setText(String.format("%.2f", itbs));
            txt_totalPagar.setText(String.format("%.2f", (cambio - itbs)));
            txt_totalPagar.setBackground(Color.red);

            // Crear objeto Transaccion
            Transaccion objeto = new Transaccion();

            // Obtener el ID del cliente remitente seleccionado
            int idClienteRemitente = obtenerIdCliente(jComboBox_clienteR);

            // Configurar el ID del cliente remitente
            objeto.setIdClienteRemitente(idClienteRemitente);

            // Obtener el ID del cliente destinatario seleccionado
            int idClienteDestinatario = obtenerIdCliente(jComboBox_clienteD);

            // Configurar el ID del cliente destinatario
            objeto.setIdClienteDestinatario(idClienteDestinatario);

            objeto.setMontoTransaccion(cantidad);
            objeto.setMonedaRemitente(monedaDe);
            objeto.setMonedaDestinatario(monedaA);
            objeto.setTipoCambio(cambio);
            objeto.setTotalPagar(totalPagar);
            objeto.setFechaHoraTransaccion(LocalDateTime.now());
            objeto.setEstado(0); // Cambiar  estado de la transacción al crear

            // Obtener el país del cliente remitente y destinatario
            String paisRemitente = (String) jComboBox_paisR.getSelectedItem();
            String paisDestinatario = (String) jComboBox_paisD.getSelectedItem();

            // Crear instancia del controlador
            Ctrl_Transaccion controlador = new Ctrl_Transaccion();

            // Guardar la transacción en la base de datos
            controlador.guardarTransaccion(objeto, paisRemitente, paisDestinatario);

            JOptionPane.showMessageDialog(null, "Cálculo y guardado Exitoso");
            this.imprimirTicket();
            limpiarCampos();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa una cantidad válida.", "Entrada inválida", JOptionPane.ERROR_MESSAGE);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona un cliente.", "Cliente no seleccionado", JOptionPane.ERROR_MESSAGE);
        } catch (TransaccionException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error al guardar la transacción", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int obtenerIdCliente(JComboBox<String> comboBox) {
        String cliente = (String) comboBox.getSelectedItem();
        String[] partes = cliente.split(" - "); // Cambiar "-" por " - "
        String cedula = partes[1].trim();
        int idCliente = obtenerIdClientePorCedula(cedula);
        return idCliente;
    }

    private int obtenerIdClientePorCedula(String cedula) {
        Connection cn = Conexion.conectar();
        int idCliente = -1;
        String sql = "SELECT idCliente FROM tb_cliente WHERE cedula = ?";
        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, cedula);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                idCliente = rs.getInt("idCliente");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID del cliente: " + e);
        }
        return idCliente;
    }

    private void limpiarCampos() {
        txt_monto.setText("");
        txt_cambio.setText("");
        txt_itbs.setText("");
        txt_totalPagar.setText("");
        jComboBox_moneda_r.setSelectedIndex(0);
        jComboBox_moneda_d.setSelectedIndex(0);
        jComboBox_clienteR.setSelectedIndex(0);
        jComboBox_clienteD.setSelectedIndex(0);
        jComboBox_paisR.setSelectedIndex(0);
        jComboBox_paisD.setSelectedIndex(0);
        txt_totalPagar.setBackground(Color.white);
        txt_cambio.setBackground(Color.white);

    }

    private void imprimirTicket() {

        try {
            // Verificar si el campo de texto de la cantidad está vacío
            if (txt_monto.getText().isEmpty() || txt_totalPagar.getText().isEmpty()) {
                throw new NumberFormatException("Hay Campos vacíos");
            }

            String nombreClienteR = jComboBox_clienteR.getSelectedItem().toString();
            String nombreClienteD = jComboBox_clienteD.getSelectedItem().toString();
            String monto = txt_monto.getText();
            String monedaR = jComboBox_moneda_r.getSelectedItem().toString();
            String monedaD = jComboBox_moneda_d.getSelectedItem().toString();
            String cambio = txt_cambio.getText();
            String itbs = txt_itbs.getText();
            String totalPagar = txt_totalPagar.getText();
            // String fecha = txtFecha.getText();
            String paisR = jComboBox_paisR.getSelectedItem().toString();
            String paisD = jComboBox_paisD.getSelectedItem().toString();

            String FechaHora = jLabel_fechaHora.getText();
            // Establecer el nombre de usuario

            // Directorio donde se guardará el archivo PDF
            String directorio = "src/pdf/";
            File dir = new File(directorio);
            if (!dir.exists()) {
                dir.mkdirs(); // Crear directorio si no existe
            }

            // Nombre del archivo PDF con el ID de la transacción
            String nombreArchivo = "ticket_transaccion_" + monto + ".pdf";

            Image imagen = Image.getInstance("./src/img/logo.png"); // Cambia "ruta_de_la_imagen.jpg" por la ruta de tu imagen
            imagen.scaleAbsolute(80, 30); // Cambia el tamaño de la imagen según lo necesites
            imagen.setAlignment(Element.ALIGN_CENTER);

            Rectangle r = new Rectangle(210, 400);
            Document documento = new Document(r, 9f, 9f, 7f, 7f);
            PdfWriter.getInstance(documento, new FileOutputStream(directorio + nombreArchivo));
            documento.open();

            // Fuente para los títulos
            Font fuententTitulo = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            // Fuente para los valores
            Font fuenteDescripcion = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);

            //salto de linea 
            Paragraph santoLinea = new Paragraph();
            santoLinea.add(new Paragraph(Chunk.NEWLINE));
            documento.add(santoLinea);

            // Título del ticket
            PdfPTable encabezadoTicket = new PdfPTable(1);
            encabezadoTicket.setWidthPercentage(100);
            float[] medidaCelda = {100f};
            encabezadoTicket.setWidths(medidaCelda);

            PdfPCell empresaticket = new PdfPCell(new Phrase("Ticket de Transacción", fuententTitulo));
            empresaticket.setVerticalAlignment(Element.ALIGN_CENTER);
            empresaticket.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresaticket.setBorder(0);

            PdfPCell empresa = new PdfPCell(new Phrase("Transfiereya", fuententTitulo));
            empresa.addElement(imagen);
            empresa.setVerticalAlignment(Element.ALIGN_CENTER);
            empresa.setHorizontalAlignment(Element.ALIGN_CENTER);
            empresa.setBorder(0);

            PdfPCell usuarioN = new PdfPCell(new Phrase(" Atendido por: " + nombreUsuario.toUpperCase(), fuenteDescripcion));
            usuarioN.setVerticalAlignment(Element.ALIGN_CENTER);
            usuarioN.setHorizontalAlignment(Element.ALIGN_CENTER);
            usuarioN.setBorder(0);

            PdfPCell separador = new PdfPCell(new Phrase("---------------------------------------------", fuenteDescripcion));
            separador.setVerticalAlignment(Element.ALIGN_CENTER);
            separador.setHorizontalAlignment(Element.ALIGN_CENTER);
            separador.setBorder(0);

            encabezadoTicket.addCell(empresaticket);
            encabezadoTicket.addCell(empresa);
            encabezadoTicket.addCell(usuarioN);

            encabezadoTicket.addCell(separador);

            documento.add(encabezadoTicket);
            documento.add(santoLinea);

            // Contenido del ticket
            PdfPTable datosTransaccion = new PdfPTable(2);
            datosTransaccion.setWidthPercentage(100);
            float[] medidaCeldaTrans = {30f, 70f};
            datosTransaccion.setWidths(medidaCeldaTrans);

            PdfPCell fecha = new PdfPCell(new Phrase("Fecha:", fuententTitulo));
            fecha.setVerticalAlignment(Element.ALIGN_CENTER);
            fecha.setHorizontalAlignment(Element.ALIGN_LEFT);
            fecha.setBorder(0);

            PdfPCell FechaHoraT = new PdfPCell(new Phrase(FechaHora, fuenteDescripcion));
            FechaHoraT.setVerticalAlignment(Element.ALIGN_CENTER);
            FechaHoraT.setHorizontalAlignment(Element.ALIGN_LEFT);
            FechaHoraT.setBorder(0);

            PdfPCell clienteR = new PdfPCell(new Phrase("Cliente Remitente:", fuententTitulo));
            clienteR.setVerticalAlignment(Element.ALIGN_CENTER);
            clienteR.setHorizontalAlignment(Element.ALIGN_LEFT);
            clienteR.setBorder(0);

            PdfPCell nombreClienteRCell = new PdfPCell(new Phrase(nombreClienteR, fuenteDescripcion));
            nombreClienteRCell.setVerticalAlignment(Element.ALIGN_CENTER);
            nombreClienteRCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            nombreClienteRCell.setBorder(0);

            PdfPCell clienteD = new PdfPCell(new Phrase("Cliente Destinatario:", fuententTitulo));
            clienteD.setVerticalAlignment(Element.ALIGN_CENTER);
            clienteD.setHorizontalAlignment(Element.ALIGN_LEFT);
            clienteD.setBorder(0);

            PdfPCell nombreClienteDCell = new PdfPCell(new Phrase(nombreClienteD, fuenteDescripcion));
            nombreClienteDCell.setVerticalAlignment(Element.ALIGN_CENTER);
            nombreClienteDCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            nombreClienteDCell.setBorder(0);

            PdfPCell paisRCell = new PdfPCell(new Phrase("País Remitente:", fuententTitulo));
            paisRCell.setVerticalAlignment(Element.ALIGN_CENTER);
            paisRCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            paisRCell.setBorder(0);

            PdfPCell paisRValueCell = new PdfPCell(new Phrase(paisR, fuenteDescripcion));
            paisRValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            paisRValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            paisRValueCell.setBorder(0);

            PdfPCell paisDCell = new PdfPCell(new Phrase("País Destino:", fuententTitulo));
            paisDCell.setVerticalAlignment(Element.ALIGN_CENTER);
            paisDCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            paisDCell.setBorder(0);

            PdfPCell paisDValueCell = new PdfPCell(new Phrase(paisD, fuenteDescripcion));
            paisDValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            paisDValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            paisDValueCell.setBorder(0);

            PdfPCell montoCell = new PdfPCell(new Phrase("Monto:", fuententTitulo));
            montoCell.setVerticalAlignment(Element.ALIGN_CENTER);
            montoCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            montoCell.setBorder(0);

            PdfPCell montoValueCell = new PdfPCell(new Phrase(monto, fuenteDescripcion));
            montoValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            montoValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            montoValueCell.setBorder(0);

            PdfPCell cambioCell = new PdfPCell(new Phrase("Cambio:", fuententTitulo));
            cambioCell.setVerticalAlignment(Element.ALIGN_CENTER);
            cambioCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cambioCell.setBorder(0);

            PdfPCell cambioValueCell = new PdfPCell(new Phrase(cambio, fuenteDescripcion));
            cambioValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            cambioValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cambioValueCell.setBorder(0);

            PdfPCell itbsCell = new PdfPCell(new Phrase("DGII 5%:", fuententTitulo));
            itbsCell.setVerticalAlignment(Element.ALIGN_CENTER);
            itbsCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            itbsCell.setBorder(0);

            PdfPCell itbsValueCell = new PdfPCell(new Phrase(itbs, fuenteDescripcion));
            itbsValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            itbsValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            itbsValueCell.setBorder(0);

            PdfPCell monedaRCell = new PdfPCell(new Phrase("Moneda Remitente:", fuententTitulo));
            monedaRCell.setVerticalAlignment(Element.ALIGN_CENTER);
            monedaRCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            monedaRCell.setBorder(0);

            PdfPCell monedaRvalueCell = new PdfPCell(new Phrase(monedaR, fuenteDescripcion));
            monedaRvalueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            monedaRvalueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            monedaRvalueCell.setBorder(0);

            PdfPCell monedaDCell = new PdfPCell(new Phrase("Moneda Destino:", fuententTitulo));
            monedaDCell.setVerticalAlignment(Element.ALIGN_CENTER);
            monedaDCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            monedaDCell.setBorder(0);

            PdfPCell monedaDValueCell = new PdfPCell(new Phrase(monedaD, fuenteDescripcion));
            monedaDValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            monedaDValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            monedaDValueCell.setBorder(0);

            PdfPCell totalPagarCell = new PdfPCell(new Phrase("Total a Pagar:", fuententTitulo));
            totalPagarCell.setVerticalAlignment(Element.ALIGN_CENTER);
            totalPagarCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            totalPagarCell.setBorder(0);

            PdfPCell totalPagarValueCell = new PdfPCell(new Phrase(totalPagar, fuenteDescripcion));
            totalPagarValueCell.setVerticalAlignment(Element.ALIGN_CENTER);
            totalPagarValueCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            totalPagarValueCell.setBorder(0);

            datosTransaccion.addCell(fecha);
            datosTransaccion.addCell(FechaHoraT);
            datosTransaccion.addCell(clienteR);
            datosTransaccion.addCell(nombreClienteRCell);
            datosTransaccion.addCell(clienteD);
            datosTransaccion.addCell(nombreClienteDCell);

            datosTransaccion.addCell(paisRCell);
            datosTransaccion.addCell(paisRValueCell);
            datosTransaccion.addCell(paisDCell);
            datosTransaccion.addCell(paisDValueCell);

            datosTransaccion.addCell(montoCell);
            datosTransaccion.addCell(montoValueCell);
            datosTransaccion.addCell(cambioCell);
            datosTransaccion.addCell(cambioValueCell);
            datosTransaccion.addCell(itbsCell);
            datosTransaccion.addCell(itbsValueCell);
            datosTransaccion.addCell(monedaRCell);
            datosTransaccion.addCell(monedaRvalueCell);
            datosTransaccion.addCell(monedaDCell);
            datosTransaccion.addCell(monedaDValueCell);

            datosTransaccion.addCell(totalPagarCell);
            datosTransaccion.addCell(totalPagarValueCell);

            documento.add(datosTransaccion);
            documento.add(santoLinea);

            // Separador
            Paragraph separador2 = new Paragraph("---------------------------------------------", fuenteDescripcion);
            separador2.setAlignment(Element.ALIGN_CENTER);
            documento.add(separador2);

            Paragraph mensajeFinal = new Paragraph("''Gracias por preferirnos''.", fuenteDescripcion);
            mensajeFinal.setAlignment(Element.ALIGN_CENTER);
            documento.add(mensajeFinal);

            documento.close();

            JOptionPane.showMessageDialog(null, "Ticket generado correctamente.");

            // Abrir el archivo PDF con la aplicación predeterminada
            File archivoPDF = new File(directorio + nombreArchivo);
            Desktop.getDesktop().open(archivoPDF);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al generar el ticket: " + e.getMessage());
        }
    }
    ;

    private String nombreUsuario;

    // Método para establecer el nombre de usuario
    public void setNombreUsuario(String nombreUsuario) {
        this.nombreUsuario = nombreUsuario;
        // lblusuario.setText("Bienvenido, " + nombreUsuario);
    }

}
