package vista;

import conexion.Conexion;
import controlador.Ctrl_Transaccion;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import modelo.Transaccion;

/**
 *
 * @author ediso
 */
public class InterGestionarTransaccion extends javax.swing.JInternalFrame {

    private int idTransaccion;

    public InterGestionarTransaccion() {
        initComponents();
        this.setSize(new Dimension(900, 600));
        this.setTitle("Gestionar Transacciones");
        //Cargar tabla
        this.CargarTablaTransacciones();

        //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_transacciones = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txt_buscar = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jButton_buscar = new javax.swing.JButton();
        jButton_eliminar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_clienteR = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_telefonoR = new javax.swing.JTextField();
        txt_ClienteD = new javax.swing.JTextField();
        txt_direccionR = new javax.swing.JTextField();
        txt_monedaD = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_paisR = new javax.swing.JTextField();
        txt_paisD = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_cambio = new javax.swing.JTextField();
        txt_direccionD = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt_telefonoD = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_totalPagar = new javax.swing.JTextField();
        txt_monto = new javax.swing.JTextField();
        txt_monedaR = new javax.swing.JTextField();
        jComboBox_estado = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/categorias.png"))); // NOI18N
        jLabel1.setText("Administrar Transaccion");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_transacciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_transacciones);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 710, 200));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Buscar:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        txt_buscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txt_buscarMouseEntered(evt);
            }
        });
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });
        txt_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_buscarKeyPressed(evt);
            }
        });
        jPanel1.add(txt_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 420, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 90, -1));

        jButton_buscar.setBackground(new java.awt.Color(51, 204, 255));
        jButton_buscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_buscar.setText("Buscar");
        jButton_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, -1));

        jButton_eliminar1.setBackground(new java.awt.Color(255, 255, 0));
        jButton_eliminar1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar1.setText("Limpiar");
        jButton_eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminar1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente R:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, -1));

        txt_clienteR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_clienteR, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Telefono R:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 90, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cliente D:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 90, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Direcci√≥n R:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 90, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Monto:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 90, -1));

        txt_telefonoR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_telefonoR, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 170, -1));

        txt_ClienteD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_ClienteD, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 170, -1));

        txt_direccionR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_direccionR, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 170, -1));

        txt_monedaD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_monedaD, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 100, 60, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Pa√≠s R:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 60, -1));

        txt_paisR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_paisR, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 170, -1));

        txt_paisD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_paisD, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 170, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Pa√≠s D:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 60, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Cambio $ :");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, 90, -1));

        txt_cambio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 100, 120, -1));

        txt_direccionD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_direccionD, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 170, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Direcci√≥n D:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 90, -1));

        txt_telefonoD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_telefonoD, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 170, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Telefono D:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 90, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Total Pagar $ :");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 140, 110, -1));

        txt_totalPagar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel3.add(txt_totalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 140, 160, -1));

        txt_monto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 120, -1));

        txt_monedaR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_monedaR, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 60, 60, -1));

        jComboBox_estado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pagado", "No Pagado" }));
        jComboBox_estado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_estadoItemStateChanged(evt);
            }
        });
        jPanel3.add(jComboBox_estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 120, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Estado:");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 60, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 200));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        if (txt_clienteR.getText().isEmpty() || txt_ClienteD.getText().isEmpty()
                || txt_monto.getText().isEmpty() || txt_monedaR.getText().isEmpty()
                || txt_monedaD.getText().isEmpty() || txt_cambio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "¬°Completa todos los campos!");
        } else {
            String nombreRemitente = txt_clienteR.getText().trim();
            String nombreDestinatario = txt_ClienteD.getText().trim();

            Ctrl_Transaccion controlTransaccion = new Ctrl_Transaccion();

            if (!controlTransaccion.verificarClienteExistente(nombreRemitente)) {
                JOptionPane.showMessageDialog(null, "El cliente remitente no existe.");
                return;
            }

            if (!controlTransaccion.verificarClienteExistente(nombreDestinatario)) {
                JOptionPane.showMessageDialog(null, "El cliente destinatario no existe.");
                return;
            }

            int idClienteRemitente = controlTransaccion.obtenerIdCliente(nombreRemitente);
            int idClienteDestinatario = controlTransaccion.obtenerIdCliente(nombreDestinatario);

            Transaccion transaccion = new Transaccion();
            transaccion.setIdTransaccion(idTransaccion);
            transaccion.setIdClienteRemitente(idClienteRemitente);
            transaccion.setIdClienteDestinatario(idClienteDestinatario);
            transaccion.setMontoTransaccion(Double.parseDouble(txt_monto.getText().trim()));
            transaccion.setMonedaRemitente(txt_monedaR.getText().trim());
            transaccion.setMonedaDestinatario(txt_monedaD.getText().trim());
            transaccion.setTipoCambio(Double.parseDouble(txt_cambio.getText().trim()));
            transaccion.setTotalPagar(Double.parseDouble(txt_totalPagar.getText().trim()));

            LocalDateTime currentDateTime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = currentDateTime.format(formatter);
            LocalDateTime fechaHora = LocalDateTime.parse(formattedDateTime, formatter);
            transaccion.setFechaHoraTransaccion(fechaHora);

            int estado = 0;
            String estadoSeleccionado = jComboBox_estado.getSelectedItem().toString();
            if (estadoSeleccionado.equals("Pagado")) {
                estado = 1;
            }
            transaccion.setEstado(estado);

            if (estado == 0) {
                transaccion.setEstado(0); // No Pagado
            }
            transaccion.setEstado(estado);

            if (controlTransaccion.actualizar(transaccion, idTransaccion)) {
                JOptionPane.showMessageDialog(null, "¬°Datos de la transacci√≥n actualizados!");
                this.CargarTablaTransacciones();
                this.Limpiar();
                idTransaccion = 0;
            } else {
                JOptionPane.showMessageDialog(null, "¬°Error al actualizar!");
                this.Limpiar();
            }
        }


    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed

        Ctrl_Transaccion controlTransaccion = new Ctrl_Transaccion();
        if (idTransaccion == 0) {
            JOptionPane.showMessageDialog(null, "¬°Seleccione un transaccion!");
        } else {
            int confirmacion = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de que desea eliminar este transaccion? el id# " + idTransaccion, "Confirmar eliminaci√≥n", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                if (!controlTransaccion.eliminar(idTransaccion)) {
                    JOptionPane.showMessageDialog(null, "¬°Transidaccion Eliminado!");
                    this.CargarTablaTransacciones();
                    this.Limpiar();
                    idTransaccion = 0;
                } else {
                    JOptionPane.showMessageDialog(null, "¬°Error al eliminar transaccion!");
                    this.Limpiar();
                }
            }
        }

    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jButton_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscarActionPerformed

        Ctrl_Transaccion controlTransaccion = new Ctrl_Transaccion();
        String Buscar = txt_buscar.getText().trim();

        if (Buscar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de b√∫squeda", "Error", JOptionPane.ERROR_MESSAGE);
            this.CargarTablaTransacciones();
            return;
        }
        try {
            ResultSet rs = controlTransaccion.buscarTransaccion(Buscar, Buscar, Buscar);
            DefaultTableModel model = (DefaultTableModel) InterGestionarTransaccion.jTable_transacciones.getModel();
            model.setRowCount(0); // Limpiar tabla

            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            do {
                Object fila[] = new Object[10];
                for (int i = 0; i < 10; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            } while (rs.next());

            rs.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar transacciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButton_buscarActionPerformed

    private void jButton_eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminar1ActionPerformed
        txt_buscar.setText("");
        this.Limpiar();
        this.CargarTablaTransacciones();
        txt_buscar.requestFocus();
    }//GEN-LAST:event_jButton_eliminar1ActionPerformed

    private void txt_buscarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_buscarMouseEntered


    }//GEN-LAST:event_txt_buscarMouseEntered

    private void txt_buscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_buscarKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            Ctrl_Transaccion controlTransaccion = new Ctrl_Transaccion();
            String Buscar = txt_buscar.getText().trim();

            if (Buscar.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor de b√∫squeda", "Error", JOptionPane.ERROR_MESSAGE);
                this.CargarTablaTransacciones();
                return;
            }
            try {
                ResultSet rs = controlTransaccion.buscarTransaccion(Buscar, Buscar, Buscar);

                if (rs != null) {
                    DefaultTableModel model = (DefaultTableModel) InterGestionarTransaccion.jTable_transacciones.getModel();
                    model.setRowCount(0); // Limpiar tabla

                    while (rs.next()) {
                        Object fila[] = new Object[10];
                        for (int i = 0; i < 10; i++) {
                            fila[i] = rs.getObject(i + 1);
                        }
                        model.addRow(fila);
                    }

                    rs.close();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al buscar transacciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_txt_buscarKeyPressed

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void jComboBox_estadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_estadoItemStateChanged
      String estadoSeleccionado = (String) jComboBox_estado.getSelectedItem();
    if (estadoSeleccionado.equals("Pagado")) {
        jComboBox_estado.setBackground(Color.GREEN);
    } else {
        jComboBox_estado.setBackground(Color.RED);
    }
    }//GEN-LAST:event_jComboBox_estadoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_buscar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_eliminar1;
    private javax.swing.JComboBox<String> jComboBox_estado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_transacciones;
    private javax.swing.JTextField txt_ClienteD;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_clienteR;
    private javax.swing.JTextField txt_direccionD;
    private javax.swing.JTextField txt_direccionR;
    private javax.swing.JTextField txt_monedaD;
    private javax.swing.JTextField txt_monedaR;
    private javax.swing.JTextField txt_monto;
    private javax.swing.JTextField txt_paisD;
    private javax.swing.JTextField txt_paisR;
    private javax.swing.JTextField txt_telefonoD;
    private javax.swing.JTextField txt_telefonoR;
    private javax.swing.JTextField txt_totalPagar;
    // End of variables declaration//GEN-END:variables

    /*
     * *****************************************************
     * metodo para limpiar
     * *****************************************************
     */
    private void Limpiar() {
        txt_clienteR.setText("");
        txt_buscar.setText("");
        txt_ClienteD.setText("");
        txt_monedaD.setText("");
        txt_monedaR.setText("");
        txt_monto.setText("");
        txt_paisR.setText("");
        txt_paisD.setText("");
        txt_telefonoR.setText("");
        txt_telefonoD.setText("");
        txt_direccionR.setText("");
        txt_direccionD.setText("");
        txt_cambio.setText("");
        txt_totalPagar.setText("");
        this.idTransaccion = 0;
        jComboBox_estado.setSelectedIndex(0);
        jComboBox_estado.setBackground(null);

    }


    /*
     * *****************************************************
     * metodo para mostrar todos los transacciones registrados
     * *****************************************************
     */
    private void CargarTablaTransacciones() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT t.idTransaccion, c1.nombre AS 'Cliente Remitente', c2.nombre AS 'Cliente Destinatario', "
                + "t.montoTransaccion, t.monedaRemitente, t.monedaDestinatario, t.tipoCambio, t.totalPagar, "
                + "t.fechaHoraTransaccion, t.estado "
                + "FROM tb_transaccion t "
                + "JOIN tb_cliente c1 ON t.idClienteRemitente = c1.idCliente "
                + "JOIN tb_cliente c2 ON t.idClienteDestinatario = c2.idCliente";

//        String sql = "SELECT t.idTransaccion, c1.nombre AS 'Cliente Remitente', c2.nombre AS 'Cliente Destinatario', "
//                + "t.montoTransaccion, t.monedaRemitente, t.monedaDestinatario, t.tipoCambio, t.totalPagar, "
//                + "t.fechaHoraTransaccion, "
//                + "CASE "
//                + "    WHEN t.estado = 1 THEN 'Pagado' "
//                + "    ELSE 'No Pagado' "
//                + "END AS 'Estado' "
//                + "FROM tb_transaccion t "
//                + "JOIN tb_cliente c1 ON t.idClienteRemitente = c1.idCliente "
//                + "JOIN tb_cliente c2 ON t.idClienteDestinatario = c2.idCliente";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterGestionarTransaccion.jTable_transacciones = new JTable(model);
            InterGestionarTransaccion.jScrollPane1.setViewportView(InterGestionarTransaccion.jTable_transacciones);

            model.addColumn("ID");
            model.addColumn("Cliente R");
            model.addColumn("Cliente D");
            model.addColumn("Monto");
            model.addColumn("Moneda R");
            model.addColumn("Moneda D");
            model.addColumn("Cambio");
            model.addColumn("TotalPagar");
            model.addColumn("Fecha");
            model.addColumn("Estado");

            while (rs.next()) {
                Object fila[] = new Object[10];
//                for (int i = 0; i < 10; i++) {
//                    fila[i] = rs.getObject(i + 1);
//                }

                fila[0] = rs.getInt("t.idTransaccion");
                fila[1] = rs.getString("Cliente Remitente");
                fila[2] = rs.getString("Cliente Destinatario");
                fila[3] = rs.getString("t.montoTransaccion");
                fila[4] = rs.getString("t.monedaRemitente");
                fila[5] = rs.getString("t.monedaDestinatario");
                fila[6] = rs.getString("t.tipoCambio");
                fila[7] = rs.getString("t.totalPagar");
                fila[8] = rs.getString("t.fechaHoraTransaccion");
                int estado = rs.getInt("t.estado");
                fila[9] = (estado == 1) ? "Pagado" : "No Pagado";
                if (estado != 1) {
                    fila[9] = "No Pagado";
                }
                //fila[9] = rs.getString("Estado");
                // fila[9] = rs.getInt("estado");
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla transacciones: " + e);
        }

        InterGestionarTransaccion.jTable_transacciones.setModel(model);
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        InterGestionarTransaccion.jTable_transacciones.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = InterGestionarTransaccion.jTable_transacciones.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idTransaccion = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosTransaccionSeleccionado(idTransaccion);//metodo

                    // Cambiar el JComboBox_estado al estado de la fila seleccionada
                    String estadoSeleccionado = (String) model.getValueAt(fila_point, 9);
                    jComboBox_estado.setSelectedItem(estadoSeleccionado);
                    if (estadoSeleccionado.equals("Pagado")) {
                        jComboBox_estado.setBackground(Color.green);
                    } else {
                        jComboBox_estado.setBackground(Color.red);
                    }
                }
            }
        });
    }


    /*
     * **************************************************
     * Metodo que envia datos seleccionados
     * **************************************************
     */
    private void EnviarDatosTransaccionSeleccionado(int idTransaccion) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "SELECT t.*, c1.nombre AS nombreRemitente, c1.pais AS paisRemitente, c1.telefono AS telefonoRemitente, c1.direccion AS direccionRemitente, "
                    + "c2.nombre AS nombreDestinatario, c2.pais AS paisDestinatario, c2.telefono AS telefonoDestinatario, c2.direccion AS direccionDestinatario "
                    + "FROM tb_transaccion t "
                    + "JOIN tb_cliente c1 ON t.idClienteRemitente = c1.idCliente "
                    + "JOIN tb_cliente c2 ON t.idClienteDestinatario = c2.idCliente "
                    + "WHERE t.idTransaccion = ?");

            pst.setInt(1, idTransaccion);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_clienteR.setText(rs.getString("nombreRemitente"));
                txt_paisR.setText(rs.getString("paisRemitente"));
                txt_telefonoR.setText(rs.getString("telefonoRemitente"));
                txt_direccionR.setText(rs.getString("direccionRemitente"));
                txt_ClienteD.setText(rs.getString("nombreDestinatario"));
                txt_paisD.setText(rs.getString("paisDestinatario"));
                txt_telefonoD.setText(rs.getString("telefonoDestinatario"));
                txt_direccionD.setText(rs.getString("direccionDestinatario"));

                txt_monto.setText(rs.getString("montoTransaccion"));
                txt_monedaR.setText(rs.getString("monedaRemitente"));
                txt_monedaD.setText(rs.getString("monedaDestinatario"));
                txt_cambio.setText(rs.getString("tipoCambio"));
                txt_totalPagar.setText(rs.getString("totalPagar"));
                // String estado = rs.getString("Estado");
                //  jComboBox_estado.setSelectedItem(estado);

                // txt_fechaHora.setText(rs.getString("fechaHoraTransaccion"));
                // txt_estado.setText(rs.getString("estado"));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar Transaccion: " + e);
        }
    }

}
